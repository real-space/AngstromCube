// This file is part of AngstromCube under MIT License

#ifndef NO_UNIT_TESTS
  #include <vector> // std::vector<>
  #include <cstring> // std::strcmp
  #include <cassert> // assert
  
  #include "simple_timer.hxx"

  #include "simple_stats.hxx" // ::Stats<T>
#endif // NO_UNIT_TESTS

#include "status.hxx" // status_t

namespace simple_timer {

#ifdef    NO_UNIT_TESTS
  status_t all_tests(int const echo) { return STATUS_TEST_NOT_INCLUDED; }
#else  // NO_UNIT_TESTS

  status_t test_strip_path(int const echo=0) {
      status_t stat(0);
      stat += std::strcmp(strip_path("///"), "");
      stat += std::strcmp(strip_path("/full/path/nowhere/"), "");
      stat += std::strcmp(strip_path("/full/path/somewhere"), "somewhere");
      stat += std::strcmp(strip_path("/very/long//../path/to"), "to");
      if (echo > 0) std::printf("# %s: %d errors\n", __func__, int(stat));
      return stat;
  } // test_strip_path

  int64_t fibonacci(int64_t const n) {
      if (n < 3) return (n > 0);
      return fibonacci(n - 1) + fibonacci(n - 2);
  } // fibonacci (classical)

  int64_t fibonacci_nonrecursive(int const n) {
      if (n < 3) return (n > 0);
      std::vector<int64_t> fib(n + 1);
      fib[0] = 0;
      fib[1] = 1;
      for (int i = 2; i <= n; ++i) {
          fib[i] = fib[i - 1] + fib[i - 2];
      } // i
      return fib[n];
  } // fibonacci (fast)

  template <typename num_t=uint64_t>
  num_t fibonacci_noarray(int const n) {
      if (n < 3) return (n > 0);
      num_t fib0{0}, fib1{1}, fibi;
      for (int i = 2; i <= n; ++i) {
          fibi = fib1 + fib0;
          // swap for the next iteration
          fib0 = fib1; 
          fib1 = fibi;
      } // i
      return fibi;
  } // fibonacci (super fast)

  status_t test_basic_usage(int const echo=3, int const inp=40) {
      auto const reference = fibonacci_nonrecursive(inp);
      assert(reference == fibonacci_noarray(inp));
      int64_t result;
      { // scope: create a timer, do some work, destroy the timer
          SimpleTimer timer(__FILE__, __LINE__, "comment=fibonacci", echo);
          result = fibonacci(inp);
          // timer destructor is envoked at the end of this scope, timing printed to log
      } // scope
      if (echo > 0) std::printf("# fibonacci(%d) = %lld\n", inp, result);

      if (echo > 99) { // warning: Fibonacci numbers grow exponentially, i.e. for large numbers every number 
                       //          is about 1.618033989 (golden ratio) larger than its predecessor
          for (int i = 0; i <= 1476; ++i) {
              if (i < 94) { std::printf("# fibonacci(%i) = %ld\n",  i, size_t(fibonacci_noarray<size_t>(i))); }
                     else { std::printf("# fibonacci(%i) = %.20g\n", i, fibonacci_noarray<double>(i)); }
           } // i
           // fibonacci_noarray<double>(1476) == 1.3069892237633987375e+308
           //                 Fibonacci(1476) ==  130698922376339931803631155380271983098392443907412640726006659460192793070479231740288681087777017721095463154979012276234322246936939647185366706368489362660844147449941348462800922755818969634743348982916424954062744135969865615407276492410653721774590669544801490837649161732095972658064630033793347171632
           // as found here https://oeis.org/A000045/b000045.txt or generated by Playground/AnyPrecisionFibonacci:
           // so the relative deviation is 5.1e-16
      } // echo

      return (reference != result);
  } // test_basic_usage

  status_t test_stop_function(int const echo=3) {
      status_t stat(0);
      int64_t result;
      simple_stats::Stats<> s;
      for (int inp = 40; inp < 45; ++inp) {
          auto const reference = fibonacci_nonrecursive(inp);
          SimpleTimer timer(__FILE__, __LINE__, "", 0);
          result = fibonacci(inp);
          stat += (reference != result);
          if (echo > 7) std::printf("# fibonacci(%d) = %lld\n", inp, result);
          s.add(timer.stop());
      } // scope
      auto const average_time = s.mean();
      if (echo > 2) std::printf("# fibonacci took %g +/- %.1e seconds per iteration, %g seconds in total\n", average_time, s.dev(), s.sum());
      return stat + (average_time < 0);
  } // test_stop_function

  status_t all_tests(int const echo) {
      if (echo > 2) std::printf("\n# %s %s\n\n", __FILE__, __func__);
      status_t stat(0);
      stat += test_strip_path(echo);
      stat += test_basic_usage(echo);
      stat += test_stop_function(echo);
      return stat;
  } // all_tests

#endif // NO_UNIT_TESTS

} // namespace simple_timer
