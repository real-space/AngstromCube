#pragma once
// This file is part of AngstromCube under MIT License

#include <cstdio> // std::sprintf
#include <cassert> // assert
#include <algorithm> // std::max
#include <cstdint> // int8_t, int16_t
#include <numeric> // std::iota

#include "simple_stats.hxx" // ::Stats
#include "status.hxx" // status_t
#include "control.hxx" // ::get
#include "recorded_warnings.hxx" // warn
#include "data_view.hxx" // view2D<T>
#include "mpi_parallel.hxx" // ::allreduce, ::sum, ::min, ::max
#include "global_coordinates.hxx" // ::get

namespace verify_benchmark {

    inline void show_symmetrized(
          view2D<double> const & density // assume to have 4^3 blocks of 4^3 grid points per cubic diamond unit cell
        , int64_t const gid[] // global block identifyer
        , size_t const nblocks // number of blocks on this MPI rank
        , uint8_t const index[][64]
        , size_t const n=40
        , uint8_t const indirection[]=nullptr
        , char const *const text="?"
        , int const echo=0 // log output level
    ) {
        assert(4*4*4 == density.stride());

        std::vector<simple_stats::Stats<double>> st(n);
        std::vector<int32_t> m444(4*4*4, 0);

        // double rho161616[16][16][16]; // DEBUG

        for (size_t iblock{0}; iblock < nblocks; ++iblock) {
            double const *const rho = density[iblock]; // a double[4*4*4] array
            uint32_t coords[3]; global_coordinates::get(coords, gid[iblock]);
            auto const i444 = (((coords[2] & 0x3)*4 + (coords[1] & 0x3))*4 + (coords[0] & 0x3)) & 63;
            ++m444[i444];
            auto const i16 = indirection ? indirection[i444] : i444;
            auto const *const idx = index[i16];
         // if (echo > 9) std::printf("# add block [%i %i %i], id= %lli with i16=%i\n", coords[0], coords[1], coords[2], gid[iblock], int(i16));
                // if (176 == n) std::printf("\n#rho i444= %i\n", i444); // DEBUG
                // double mini{9e99}, maxi{-9e99};
            for (int i64{0}; i64 < 64; ++i64) { // grid points in a 4x4x4 block
                auto const i40 = idx[i64];
                assert(i40 < n);
                st.at(i40).add(rho[i64]);
                // int const ix = (coords[0] & 0x3)*4 + ((i64 >> 0) & 0x3);
                // int const iy = (coords[1] & 0x3)*4 + ((i64 >> 2) & 0x3);
                // int const iz = (coords[2] & 0x3)*4 + ((i64 >> 4) & 0x3);
                // if (176 == n) std::printf("#rho %2.2i%2.2i%2.2i %g\n", iz, iy, ix, rho[i64]); // DEBUG
                // rho161616[ix][iy][iz] = rho[i64]; // DEBUG
                // mini = std::min(mini, rho[i64]);
                // maxi = std::max(maxi, rho[i64]);
            } // i64
                // if (176 == n) std::printf("#rho i444= %i in [%g, %g]\n", i444, mini, maxi); // DEBUG
        } // iblock

        { // scope: make sure that there is a balanced number of blocks of each unit cell
            mpi_parallel::sum(m444.data(), m444.size()); // usues MPI_COMM_WORLD by default
            int32_t mini{2147483647}, maxi{-1};
            for (int i444{0}; i444 < 4*4*4; ++i444) {
                mini = std::min(mini, m444[i444]);
                maxi = std::max(maxi, m444[i444]);
            } // i444
            if (echo > 3) std::printf("# detected %d = %d complete diamond unit cells\n", mini, maxi);
            assert(mini == maxi); // all values must be the same
        } // scope

        for (int i40{0}; i40 < n; ++i40) {
            mpi_parallel::allreduce(st.at(i40)); // usues MPI_COMM_WORLD by default
        } // i40

        if (echo > 1) { // plot
            std::printf("\n## %s\n# i%lu avg avg+dev avg-dev min max dev tim\n", text, n);
            double maxdev{0};
            for (int i40{0}; i40 < n; ++i40) {
                auto const & s = st.at(i40);
                auto const avg = s.mean(), dev = s.dev();
                std::printf("%d  %g %g %g %g %g %g %lu\n", i40, avg, avg + dev, avg - dev, s.min(), s.max(), dev, s.tim());
                maxdev = std::max(maxdev, dev);
            } // i40
            std::printf("# maximum deviation from symmetric is %g\n\n", maxdev);
        } // echo

        // if (176 == n) {
        //     std::printf("\n\n#rho as lines\n");
        //     for (int ix{0}; ix < 16; ++ix) {
        //         std::printf("%i ", ix);
        //         for (int i256{0}; i256 < 16*16; ++i256) {
        //             std::printf(" %g", rho161616[ix][i256 >> 4][i256 & 15]);
        //         } // ix
        //         std::printf("\n");
        //     } // i256
        //     std::printf("#rho as lines end\n\n"); std::fflush(stdout);
        // } // DEBUG



    } // show_symmetrized


    inline status_t verify_diamond(
          view2D<double> const & density // assume to have 4^3 blocks of 4^3 grid points per cubic diamond unit cell
        , int64_t const gid[] // global block identifyer
        , size_t const nblocks // number of blocks on this MPI rank
        , int const echo=0 // log output level
    ) {

        // the following tables were generated by local scripts test/understand_diamond_structure.cxx and test/understand_diamond_symmetry.cxx

        // a 16x16x16 grid with 8 carbon atoms in periodic diamond symmetry has max 40 different field values

        // assume that the coarse density has a diamond unit cell with 16x16x16 grid points, i.e. 4x4x4 blocks per unit cell
        uint8_t const i_uniq16[64] = {0,1,2,3,4,5,6,7,2,3,0,1,6,7,4,5,8,9,10,11,12,13,14,15,10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,0,1,2,3,4,5,6,7,10,11,8,9,14,15,12,13,8,9,10,11,12,13,14,15};
        uint8_t const index40[16][64] = {
        {27,32,34,36,32,35,37,34,34,37,35,32,36,34,32,27,32,35,37,34,35,38,39,37,37,39,38,35,34,37,35,32,34,37,35,32,37,39,38,35,35,38,39,37,32,35,37,34,36,34,32,27,34,37,35,32,32,35,37,34,27,32,34,36},
        {33,28,23,18,31,25,19,12,26,20,14, 8,22,16,11, 5,31,25,19,12,30,24,17,10,29,21,15, 7,26,20,14, 8,26,20,14, 8,29,21,15, 7,30,24,17,10,31,25,19,12,22,16,11, 5,26,20,14, 8,31,25,19,12,33,28,23,18},
        {13, 9, 4, 1, 9, 6, 3, 4, 4, 3, 6, 9, 1, 4, 9,13, 9, 6, 3, 4, 6, 2, 0, 3, 3, 0, 2, 6, 4, 3, 6, 9, 4, 3, 6, 9, 3, 0, 2, 6, 6, 2, 0, 3, 9, 6, 3, 4, 1, 4, 9,13, 4, 3, 6, 9, 9, 6, 3, 4,13, 9, 4, 1},
        { 5,11,16,22, 8,14,20,26,12,19,25,31,18,23,28,33, 8,14,20,26, 7,15,21,29,10,17,24,30,12,19,25,31,12,19,25,31,10,17,24,30, 7,15,21,29, 8,14,20,26,18,23,28,33,12,19,25,31, 8,14,20,26, 5,11,16,22},
        {33,31,26,22,28,25,20,16,23,19,14,11,18,12, 8, 5,31,30,29,26,25,24,21,20,19,17,15,14,12,10, 7, 8,26,29,30,31,20,21,24,25,14,15,17,19, 8, 7,10,12,22,26,31,33,16,20,25,28,11,14,19,23, 5, 8,12,18},
        {18,12, 8, 5,12,10, 7, 8, 8, 7,10,12, 5, 8,12,18,23,19,14,11,19,17,15,14,14,15,17,19,11,14,19,23,28,25,20,16,25,24,21,20,20,21,24,25,16,20,25,28,33,31,26,22,31,30,29,26,26,29,30,31,22,26,31,33},
        { 5, 8,12,18,11,14,19,23,16,20,25,28,22,26,31,33, 8, 7,10,12,14,15,17,19,20,21,24,25,26,29,30,31,12,10, 7, 8,19,17,15,14,25,24,21,20,31,30,29,26,18,12, 8, 5,23,19,14,11,28,25,20,16,33,31,26,22},
        {22,26,31,33,26,29,30,31,31,30,29,26,33,31,26,22,16,20,25,28,20,21,24,25,25,24,21,20,28,25,20,16,11,14,19,23,14,15,17,19,19,17,15,14,23,19,14,11, 5, 8,12,18, 8, 7,10,12,12,10, 7, 8,18,12, 8, 5},
        {33,31,26,22,31,30,29,26,26,29,30,31,22,26,31,33,28,25,20,16,25,24,21,20,20,21,24,25,16,20,25,28,23,19,14,11,19,17,15,14,14,15,17,19,11,14,19,23,18,12, 8, 5,12,10, 7, 8, 8, 7,10,12, 5, 8,12,18},
        {18,12, 8, 5,23,19,14,11,28,25,20,16,33,31,26,22,12,10, 7, 8,19,17,15,14,25,24,21,20,31,30,29,26, 8, 7,10,12,14,15,17,19,20,21,24,25,26,29,30,31, 5, 8,12,18,11,14,19,23,16,20,25,28,22,26,31,33},
        { 5, 8,12,18, 8, 7,10,12,12,10, 7, 8,18,12, 8, 5,11,14,19,23,14,15,17,19,19,17,15,14,23,19,14,11,16,20,25,28,20,21,24,25,25,24,21,20,28,25,20,16,22,26,31,33,26,29,30,31,31,30,29,26,33,31,26,22},
        {22,26,31,33,16,20,25,28,11,14,19,23, 5, 8,12,18,26,29,30,31,20,21,24,25,14,15,17,19, 8, 7,10,12,31,30,29,26,25,24,21,20,19,17,15,14,12,10, 7, 8,33,31,26,22,28,25,20,16,23,19,14,11,18,12, 8, 5},
        {18,23,28,33,12,19,25,31, 8,14,20,26, 5,11,16,22,12,19,25,31,10,17,24,30, 7,15,21,29, 8,14,20,26, 8,14,20,26, 7,15,21,29,10,17,24,30,12,19,25,31, 5,11,16,22, 8,14,20,26,12,19,25,31,18,23,28,33},
        {36,34,32,27,34,37,35,32,32,35,37,34,27,32,34,36,34,37,35,32,37,39,38,35,35,38,39,37,32,35,37,34,32,35,37,34,35,38,39,37,37,39,38,35,34,37,35,32,27,32,34,36,32,35,37,34,34,37,35,32,36,34,32,27},
        {22,16,11, 5,26,20,14, 8,31,25,19,12,33,28,23,18,26,20,14, 8,29,21,15, 7,30,24,17,10,31,25,19,12,31,25,19,12,30,24,17,10,29,21,15, 7,26,20,14, 8,33,28,23,18,31,25,19,12,26,20,14, 8,22,16,11, 5},
        { 1, 4, 9,13, 4, 3, 6, 9, 9, 6, 3, 4,13, 9, 4, 1, 4, 3, 6, 9, 3, 0, 2, 6, 6, 2, 0, 3, 9, 6, 3, 4, 9, 6, 3, 4, 6, 2, 0, 3, 3, 0, 2, 6, 4, 3, 6, 9,13, 9, 4, 1, 9, 6, 3, 4, 4, 3, 6, 9, 1, 4, 9,13}};
        int16_t const multiplicity40[40] = { 32,32,32,96,96,96,96,96,192,96,96,96,192,32,192,96,96,96,96,192,192,96,96,96,96,192,192,32,96,96,96,192,96,96,96,96,32,96,32,32};

        // uint8_t const index176[64][64] = {
        // {175,174,173,172,174,167,166,165,173,155,154,153,172,156,144,143,174,167,155,156,167,118,117,116,166,117,111,110,165,116,101,100
        // ,173,166,154,144,155,117,111,101,154,111, 75, 74,153,110, 74, 69,172,165,153,143,156,116,110,100,144,101, 74, 69,143,100, 69, 44},
        // {171,170,169,168,164,163,162,161,152,151,150,149,142,141,140,139,157,158,159,160,115,114,113,112,109,108,107,106, 99, 98, 97, 96
        // ,145,146,147,148,102,103,104,105, 73, 72, 71, 70, 68, 67, 66, 65,135,136,137,138, 92, 93, 94, 95, 61, 62, 63, 64, 43, 42, 41, 40},
        // {168,169,170,171,160,159,158,157,148,147,146,145,138,137,136,135,161,162,163,164,112,113,114,115,105,104,103,102, 95, 94, 93, 92
        // ,149,150,151,152,106,107,108,109, 70, 71, 72, 73, 64, 63, 62, 61,139,140,141,142, 96, 97, 98, 99, 65, 66, 67, 68, 40, 41, 42, 43},
        // {172,173,174,175,156,155,167,174,144,154,166,173,143,153,165,172,165,166,167,174,116,117,118,167,101,111,117,155,100,110,116,156
        // ,153,154,155,173,110,111,117,166, 74, 75,111,154, 69, 74,101,144,143,144,156,172,100,101,116,165, 69, 74,110,153, 44, 69,100,143},
        // {171,157,145,135,170,158,146,136,169,159,147,137,168,160,148,138,164,115,102, 92,163,114,103, 93,162,113,104, 94,161,112,105, 95
        // ,152,109, 73, 61,151,108, 72, 62,150,107, 71, 63,149,106, 70, 64,142, 99, 68, 43,141, 98, 67, 42,140, 97, 66, 41,139, 96, 65, 40},
        // {134,133,132,131,128,127,126,125,129,123,122,121,130,124,120,119, 91, 90, 89, 88, 85, 84, 83, 82, 86, 80, 79, 78, 87, 81, 77, 76
        // , 60, 59, 58, 57, 54, 53, 52, 51, 55, 49, 48, 47, 56, 50, 46, 45, 39, 38, 37, 36, 33, 32, 31, 30, 34, 28, 27, 26, 35, 29, 25, 24},
        // {130,129,128,134,124,123,127,133,120,122,126,132,119,121,125,131, 87, 86, 85, 91, 81, 80, 84, 90, 77, 79, 83, 89, 76, 78, 82, 88
        // , 56, 55, 54, 60, 50, 49, 53, 59, 46, 48, 52, 58, 45, 47, 51, 57, 35, 34, 33, 39, 29, 28, 32, 38, 25, 27, 31, 37, 24, 26, 30, 36},
        // {142,152,164,171,141,151,163,170,140,150,162,169,139,149,161,168, 99,109,115,157, 98,108,114,158, 97,107,113,159, 96,106,112,160
        // , 68, 73,102,145, 67, 72,103,146, 66, 71,104,147, 65, 70,105,148, 43, 61, 92,135, 42, 62, 93,136, 41, 63, 94,137, 40, 64, 95,138},
        // {168,161,149,139,169,162,150,140,170,163,151,141,171,164,152,142,160,112,106, 96,159,113,107, 97,158,114,108, 98,157,115,109, 99
        // ,148,105, 70, 65,147,104, 71, 66,146,103, 72, 67,145,102, 73, 68,138, 95, 64, 40,137, 94, 63, 41,136, 93, 62, 42,135, 92, 61, 43},
        // {131,125,121,119,132,126,122,120,133,127,123,124,134,128,129,130, 88, 82, 78, 76, 89, 83, 79, 77, 90, 84, 80, 81, 91, 85, 86, 87
        // , 57, 51, 47, 45, 58, 52, 48, 46, 59, 53, 49, 50, 60, 54, 55, 56, 36, 30, 26, 24, 37, 31, 27, 25, 38, 32, 28, 29, 39, 33, 34, 35},
        // {119,120,124,130,121,122,123,129,125,126,127,128,131,132,133,134, 76, 77, 81, 87, 78, 79, 80, 86, 82, 83, 84, 85, 88, 89, 90, 91
        // , 45, 46, 50, 56, 47, 48, 49, 55, 51, 52, 53, 54, 57, 58, 59, 60, 24, 25, 29, 35, 26, 27, 28, 34, 30, 31, 32, 33, 36, 37, 38, 39},
        // {138,148,160,168,137,147,159,169,136,146,158,170,135,145,157,171, 95,105,112,161, 94,104,113,162, 93,103,114,163, 92,102,115,164
        // , 64, 70,106,149, 63, 71,107,150, 62, 72,108,151, 61, 73,109,152, 40, 65, 96,139, 41, 66, 97,140, 42, 67, 98,141, 43, 68, 99,142},
        // {172,165,153,143,173,166,154,144,174,167,155,156,175,174,173,172,156,116,110,100,155,117,111,101,167,118,117,116,174,167,166,165
        // ,144,101, 74, 69,154,111, 75, 74,166,117,111,110,173,155,154,153,143,100, 69, 44,153,110, 74, 69,165,116,101,100,172,156,144,143},
        // {135,136,137,138,145,146,147,148,157,158,159,160,171,170,169,168, 92, 93, 94, 95,102,103,104,105,115,114,113,112,164,163,162,161
        // , 61, 62, 63, 64, 73, 72, 71, 70,109,108,107,106,152,151,150,149, 43, 42, 41, 40, 68, 67, 66, 65, 99, 98, 97, 96,142,141,140,139},
        // {139,140,141,142,149,150,151,152,161,162,163,164,168,169,170,171, 96, 97, 98, 99,106,107,108,109,112,113,114,115,160,159,158,157
        // , 65, 66, 67, 68, 70, 71, 72, 73,105,104,103,102,148,147,146,145, 40, 41, 42, 43, 64, 63, 62, 61, 95, 94, 93, 92,138,137,136,135},
        // {143,144,156,172,153,154,155,173,165,166,167,174,172,173,174,175,100,101,116,165,110,111,117,166,116,117,118,167,156,155,167,174
        // , 69, 74,110,153, 74, 75,111,154,101,111,117,155,144,154,166,173, 44, 69,100,143, 69, 74,101,144,100,110,116,156,143,153,165,172},
        // {171,164,152,142,157,115,109, 99,145,102, 73, 68,135, 92, 61, 43,170,163,151,141,158,114,108, 98,146,103, 72, 67,136, 93, 62, 42
        // ,169,162,150,140,159,113,107, 97,147,104, 71, 66,137, 94, 63, 41,168,161,149,139,160,112,106, 96,148,105, 70, 65,138, 95, 64, 40},
        // {134,128,129,130, 91, 85, 86, 87, 60, 54, 55, 56, 39, 33, 34, 35,133,127,123,124, 90, 84, 80, 81, 59, 53, 49, 50, 38, 32, 28, 29
        // ,132,126,122,120, 89, 83, 79, 77, 58, 52, 48, 46, 37, 31, 27, 25,131,125,121,119, 88, 82, 78, 76, 57, 51, 47, 45, 36, 30, 26, 24},
        // {131,132,133,134, 88, 89, 90, 91, 57, 58, 59, 60, 36, 37, 38, 39,125,126,127,128, 82, 83, 84, 85, 51, 52, 53, 54, 30, 31, 32, 33
        // ,121,122,123,129, 78, 79, 80, 86, 47, 48, 49, 55, 26, 27, 28, 34,119,120,124,130, 76, 77, 81, 87, 45, 46, 50, 56, 24, 25, 29, 35},
        // {135,145,157,171, 92,102,115,164, 61, 73,109,152, 43, 68, 99,142,136,146,158,170, 93,103,114,163, 62, 72,108,151, 42, 67, 98,141
        // ,137,147,159,169, 94,104,113,162, 63, 71,107,150, 41, 66, 97,140,138,148,160,168, 95,105,112,161, 64, 70,106,149, 40, 65, 96,139},
        // {134, 91, 60, 39,133, 90, 59, 38,132, 89, 58, 37,131, 88, 57, 36,128, 85, 54, 33,127, 84, 53, 32,126, 83, 52, 31,125, 82, 51, 30
        // ,129, 86, 55, 34,123, 80, 49, 28,122, 79, 48, 27,121, 78, 47, 26,130, 87, 56, 35,124, 81, 50, 29,120, 77, 46, 25,119, 76, 45, 24},
        // { 23, 22, 21, 20, 22, 19, 18, 17, 21, 15, 14, 13, 20, 16, 12, 11, 22, 19, 15, 16, 19, 10,  9,  8, 18,  9,  7,  6, 17,  8,  5,  4
        // , 21, 18, 14, 12, 15,  9,  7,  5, 14,  7,  3,  2, 13,  6,  2,  1, 20, 17, 13, 11, 16,  8,  6,  4, 12,  5,  2,  1, 11,  4,  1,  0},
        // { 20, 21, 22, 23, 16, 15, 19, 22, 12, 14, 18, 21, 11, 13, 17, 20, 17, 18, 19, 22,  8,  9, 10, 19,  5,  7,  9, 15,  4,  6,  8, 16
        // , 13, 14, 15, 21,  6,  7,  9, 18,  2,  3,  7, 14,  1,  2,  5, 12, 11, 12, 16, 20,  4,  5,  8, 17,  1,  2,  6, 13,  0,  1,  4, 11},
        // { 39, 60, 91,134, 33, 54, 85,128, 34, 55, 86,129, 35, 56, 87,130, 38, 59, 90,133, 32, 53, 84,127, 28, 49, 80,123, 29, 50, 81,124
        // , 37, 58, 89,132, 31, 52, 83,126, 27, 48, 79,122, 25, 46, 77,120, 36, 57, 88,131, 30, 51, 82,125, 26, 47, 78,121, 24, 45, 76,119},
        // {130, 87, 56, 35,129, 86, 55, 34,128, 85, 54, 33,134, 91, 60, 39,124, 81, 50, 29,123, 80, 49, 28,127, 84, 53, 32,133, 90, 59, 38
        // ,120, 77, 46, 25,122, 79, 48, 27,126, 83, 52, 31,132, 89, 58, 37,119, 76, 45, 24,121, 78, 47, 26,125, 82, 51, 30,131, 88, 57, 36},
        // { 20, 17, 13, 11, 21, 18, 14, 12, 22, 19, 15, 16, 23, 22, 21, 20, 16,  8,  6,  4, 15,  9,  7,  5, 19, 10,  9,  8, 22, 19, 18, 17
        // , 12,  5,  2,  1, 14,  7,  3,  2, 18,  9,  7,  6, 21, 15, 14, 13, 11,  4,  1,  0, 13,  6,  2,  1, 17,  8,  5,  4, 20, 16, 12, 11},
        // { 11, 12, 16, 20, 13, 14, 15, 21, 17, 18, 19, 22, 20, 21, 22, 23,  4,  5,  8, 17,  6,  7,  9, 18,  8,  9, 10, 19, 16, 15, 19, 22
        // ,  1,  2,  6, 13,  2,  3,  7, 14,  5,  7,  9, 15, 12, 14, 18, 21,  0,  1,  4, 11,  1,  2,  5, 12,  4,  6,  8, 16, 11, 13, 17, 20},
        // { 36, 57, 88,131, 37, 58, 89,132, 38, 59, 90,133, 39, 60, 91,134, 30, 51, 82,125, 31, 52, 83,126, 32, 53, 84,127, 33, 54, 85,128
        // , 26, 47, 78,121, 27, 48, 79,122, 28, 49, 80,123, 34, 55, 86,129, 24, 45, 76,119, 25, 46, 77,120, 29, 50, 81,124, 35, 56, 87,130},
        // {142, 99, 68, 43,152,109, 73, 61,164,115,102, 92,171,157,145,135,141, 98, 67, 42,151,108, 72, 62,163,114,103, 93,170,158,146,136
        // ,140, 97, 66, 41,150,107, 71, 63,162,113,104, 94,169,159,147,137,139, 96, 65, 40,149,106, 70, 64,161,112,105, 95,168,160,148,138},
        // { 39, 38, 37, 36, 60, 59, 58, 57, 91, 90, 89, 88,134,133,132,131, 33, 32, 31, 30, 54, 53, 52, 51, 85, 84, 83, 82,128,127,126,125
        // , 34, 28, 27, 26, 55, 49, 48, 47, 86, 80, 79, 78,129,123,122,121, 35, 29, 25, 24, 56, 50, 46, 45, 87, 81, 77, 76,130,124,120,119},
        // { 35, 34, 33, 39, 56, 55, 54, 60, 87, 86, 85, 91,130,129,128,134, 29, 28, 32, 38, 50, 49, 53, 59, 81, 80, 84, 90,124,123,127,133
        // , 25, 27, 31, 37, 46, 48, 52, 58, 77, 79, 83, 89,120,122,126,132, 24, 26, 30, 36, 45, 47, 51, 57, 76, 78, 82, 88,119,121,125,131},
        // { 43, 61, 92,135, 68, 73,102,145, 99,109,115,157,142,152,164,171, 42, 62, 93,136, 67, 72,103,146, 98,108,114,158,141,151,163,170
        // , 41, 63, 94,137, 66, 71,104,147, 97,107,113,159,140,150,162,169, 40, 64, 95,138, 65, 70,105,148, 96,106,112,160,139,149,161,168},
        // {168,160,148,138,161,112,105, 95,149,106, 70, 64,139, 96, 65, 40,169,159,147,137,162,113,104, 94,150,107, 71, 63,140, 97, 66, 41
        // ,170,158,146,136,163,114,103, 93,151,108, 72, 62,141, 98, 67, 42,171,157,145,135,164,115,102, 92,152,109, 73, 61,142, 99, 68, 43},
        // {130,124,120,119, 87, 81, 77, 76, 56, 50, 46, 45, 35, 29, 25, 24,129,123,122,121, 86, 80, 79, 78, 55, 49, 48, 47, 34, 28, 27, 26
        // ,128,127,126,125, 85, 84, 83, 82, 54, 53, 52, 51, 33, 32, 31, 30,134,133,132,131, 91, 90, 89, 88, 60, 59, 58, 57, 39, 38, 37, 36},
        // {119,121,125,131, 76, 78, 82, 88, 45, 47, 51, 57, 24, 26, 30, 36,120,122,126,132, 77, 79, 83, 89, 46, 48, 52, 58, 25, 27, 31, 37
        // ,124,123,127,133, 81, 80, 84, 90, 50, 49, 53, 59, 29, 28, 32, 38,130,129,128,134, 87, 86, 85, 91, 56, 55, 54, 60, 35, 34, 33, 39},
        // {139,149,161,168, 96,106,112,160, 65, 70,105,148, 40, 64, 95,138,140,150,162,169, 97,107,113,159, 66, 71,104,147, 41, 63, 94,137
        // ,141,151,163,170, 98,108,114,158, 67, 72,103,146, 42, 62, 93,136,142,152,164,171, 99,109,115,157, 68, 73,102,145, 43, 61, 92,135},
        // {131, 88, 57, 36,125, 82, 51, 30,121, 78, 47, 26,119, 76, 45, 24,132, 89, 58, 37,126, 83, 52, 31,122, 79, 48, 27,120, 77, 46, 25
        // ,133, 90, 59, 38,127, 84, 53, 32,123, 80, 49, 28,124, 81, 50, 29,134, 91, 60, 39,128, 85, 54, 33,129, 86, 55, 34,130, 87, 56, 35},
        // { 20, 16, 12, 11, 17,  8,  5,  4, 13,  6,  2,  1, 11,  4,  1,  0, 21, 15, 14, 13, 18,  9,  7,  6, 14,  7,  3,  2, 12,  5,  2,  1
        // , 22, 19, 18, 17, 19, 10,  9,  8, 15,  9,  7,  5, 16,  8,  6,  4, 23, 22, 21, 20, 22, 19, 15, 16, 21, 18, 14, 12, 20, 17, 13, 11},
        // { 11, 13, 17, 20,  4,  6,  8, 16,  1,  2,  5, 12,  0,  1,  4, 11, 12, 14, 18, 21,  5,  7,  9, 15,  2,  3,  7, 14,  1,  2,  6, 13
        // , 16, 15, 19, 22,  8,  9, 10, 19,  6,  7,  9, 18,  4,  5,  8, 17, 20, 21, 22, 23, 17, 18, 19, 22, 13, 14, 15, 21, 11, 12, 16, 20},
        // { 35, 56, 87,130, 29, 50, 81,124, 25, 46, 77,120, 24, 45, 76,119, 34, 55, 86,129, 28, 49, 80,123, 27, 48, 79,122, 26, 47, 78,121
        // , 33, 54, 85,128, 32, 53, 84,127, 31, 52, 83,126, 30, 51, 82,125, 39, 60, 91,134, 38, 59, 90,133, 37, 58, 89,132, 36, 57, 88,131},
        // {119, 76, 45, 24,120, 77, 46, 25,124, 81, 50, 29,130, 87, 56, 35,121, 78, 47, 26,122, 79, 48, 27,123, 80, 49, 28,129, 86, 55, 34
        // ,125, 82, 51, 30,126, 83, 52, 31,127, 84, 53, 32,128, 85, 54, 33,131, 88, 57, 36,132, 89, 58, 37,133, 90, 59, 38,134, 91, 60, 39},
        // { 11,  4,  1,  0, 12,  5,  2,  1, 16,  8,  6,  4, 20, 17, 13, 11, 13,  6,  2,  1, 14,  7,  3,  2, 15,  9,  7,  5, 21, 18, 14, 12
        // , 17,  8,  5,  4, 18,  9,  7,  6, 19, 10,  9,  8, 22, 19, 15, 16, 20, 16, 12, 11, 21, 15, 14, 13, 22, 19, 18, 17, 23, 22, 21, 20},
        // {  0,  1,  4, 11,  1,  2,  6, 13,  4,  5,  8, 17, 11, 12, 16, 20,  1,  2,  5, 12,  2,  3,  7, 14,  6,  7,  9, 18, 13, 14, 15, 21
        // ,  4,  6,  8, 16,  5,  7,  9, 15,  8,  9, 10, 19, 17, 18, 19, 22, 11, 13, 17, 20, 12, 14, 18, 21, 16, 15, 19, 22, 20, 21, 22, 23},
        // { 24, 45, 76,119, 26, 47, 78,121, 30, 51, 82,125, 36, 57, 88,131, 25, 46, 77,120, 27, 48, 79,122, 31, 52, 83,126, 37, 58, 89,132
        // , 29, 50, 81,124, 28, 49, 80,123, 32, 53, 84,127, 38, 59, 90,133, 35, 56, 87,130, 34, 55, 86,129, 33, 54, 85,128, 39, 60, 91,134},
        // {138, 95, 64, 40,148,105, 70, 65,160,112,106, 96,168,161,149,139,137, 94, 63, 41,147,104, 71, 66,159,113,107, 97,169,162,150,140
        // ,136, 93, 62, 42,146,103, 72, 67,158,114,108, 98,170,163,151,141,135, 92, 61, 43,145,102, 73, 68,157,115,109, 99,171,164,152,142},
        // { 36, 30, 26, 24, 57, 51, 47, 45, 88, 82, 78, 76,131,125,121,119, 37, 31, 27, 25, 58, 52, 48, 46, 89, 83, 79, 77,132,126,122,120
        // , 38, 32, 28, 29, 59, 53, 49, 50, 90, 84, 80, 81,133,127,123,124, 39, 33, 34, 35, 60, 54, 55, 56, 91, 85, 86, 87,134,128,129,130},
        // { 24, 25, 29, 35, 45, 46, 50, 56, 76, 77, 81, 87,119,120,124,130, 26, 27, 28, 34, 47, 48, 49, 55, 78, 79, 80, 86,121,122,123,129
        // , 30, 31, 32, 33, 51, 52, 53, 54, 82, 83, 84, 85,125,126,127,128, 36, 37, 38, 39, 57, 58, 59, 60, 88, 89, 90, 91,131,132,133,134},
        // { 40, 65, 96,139, 64, 70,106,149, 95,105,112,161,138,148,160,168, 41, 66, 97,140, 63, 71,107,150, 94,104,113,162,137,147,159,169
        // , 42, 67, 98,141, 62, 72,108,151, 93,103,114,163,136,146,158,170, 43, 68, 99,142, 61, 73,109,152, 92,102,115,164,135,145,157,171},
        // {172,156,144,143,165,116,101,100,153,110, 74, 69,143,100, 69, 44,173,155,154,153,166,117,111,110,154,111, 75, 74,144,101, 74, 69
        // ,174,167,166,165,167,118,117,116,155,117,111,101,156,116,110,100,175,174,173,172,174,167,155,156,173,166,154,144,172,165,153,143},
        // {142,141,140,139, 99, 98, 97, 96, 68, 67, 66, 65, 43, 42, 41, 40,152,151,150,149,109,108,107,106, 73, 72, 71, 70, 61, 62, 63, 64
        // ,164,163,162,161,115,114,113,112,102,103,104,105, 92, 93, 94, 95,171,170,169,168,157,158,159,160,145,146,147,148,135,136,137,138},
        // {138,137,136,135, 95, 94, 93, 92, 64, 63, 62, 61, 40, 41, 42, 43,148,147,146,145,105,104,103,102, 70, 71, 72, 73, 65, 66, 67, 68
        // ,160,159,158,157,112,113,114,115,106,107,108,109, 96, 97, 98, 99,168,169,170,171,161,162,163,164,149,150,151,152,139,140,141,142},
        // {143,153,165,172,100,110,116,156, 69, 74,101,144, 44, 69,100,143,144,154,166,173,101,111,117,155, 74, 75,111,154, 69, 74,110,153
        // ,156,155,167,174,116,117,118,167,110,111,117,166,100,101,116,165,172,173,174,175,165,166,167,174,153,154,155,173,143,144,156,172},
        // {135, 92, 61, 43,136, 93, 62, 42,137, 94, 63, 41,138, 95, 64, 40,145,102, 73, 68,146,103, 72, 67,147,104, 71, 66,148,105, 70, 65
        // ,157,115,109, 99,158,114,108, 98,159,113,107, 97,160,112,106, 96,171,164,152,142,170,163,151,141,169,162,150,140,168,161,149,139},
        // { 39, 33, 34, 35, 38, 32, 28, 29, 37, 31, 27, 25, 36, 30, 26, 24, 60, 54, 55, 56, 59, 53, 49, 50, 58, 52, 48, 46, 57, 51, 47, 45
        // , 91, 85, 86, 87, 90, 84, 80, 81, 89, 83, 79, 77, 88, 82, 78, 76,134,128,129,130,133,127,123,124,132,126,122,120,131,125,121,119},
        // { 36, 37, 38, 39, 30, 31, 32, 33, 26, 27, 28, 34, 24, 25, 29, 35, 57, 58, 59, 60, 51, 52, 53, 54, 47, 48, 49, 55, 45, 46, 50, 56
        // , 88, 89, 90, 91, 82, 83, 84, 85, 78, 79, 80, 86, 76, 77, 81, 87,131,132,133,134,125,126,127,128,121,122,123,129,119,120,124,130},
        // { 43, 68, 99,142, 42, 67, 98,141, 41, 66, 97,140, 40, 65, 96,139, 61, 73,109,152, 62, 72,108,151, 63, 71,107,150, 64, 70,106,149
        // , 92,102,115,164, 93,103,114,163, 94,104,113,162, 95,105,112,161,135,145,157,171,136,146,158,170,137,147,159,169,138,148,160,168},
        // {139, 96, 65, 40,140, 97, 66, 41,141, 98, 67, 42,142, 99, 68, 43,149,106, 70, 64,150,107, 71, 63,151,108, 72, 62,152,109, 73, 61
        // ,161,112,105, 95,162,113,104, 94,163,114,103, 93,164,115,102, 92,168,160,148,138,169,159,147,137,170,158,146,136,171,157,145,135},
        // { 35, 29, 25, 24, 34, 28, 27, 26, 33, 32, 31, 30, 39, 38, 37, 36, 56, 50, 46, 45, 55, 49, 48, 47, 54, 53, 52, 51, 60, 59, 58, 57
        // , 87, 81, 77, 76, 86, 80, 79, 78, 85, 84, 83, 82, 91, 90, 89, 88,130,124,120,119,129,123,122,121,128,127,126,125,134,133,132,131},
        // { 24, 26, 30, 36, 25, 27, 31, 37, 29, 28, 32, 38, 35, 34, 33, 39, 45, 47, 51, 57, 46, 48, 52, 58, 50, 49, 53, 59, 56, 55, 54, 60
        // , 76, 78, 82, 88, 77, 79, 83, 89, 81, 80, 84, 90, 87, 86, 85, 91,119,121,125,131,120,122,126,132,124,123,127,133,130,129,128,134},
        // { 40, 64, 95,138, 41, 63, 94,137, 42, 62, 93,136, 43, 61, 92,135, 65, 70,105,148, 66, 71,104,147, 67, 72,103,146, 68, 73,102,145
        // , 96,106,112,160, 97,107,113,159, 98,108,114,158, 99,109,115,157,139,149,161,168,140,150,162,169,141,151,163,170,142,152,164,171},
        // {143,100, 69, 44,144,101, 74, 69,156,116,110,100,172,165,153,143,153,110, 74, 69,154,111, 75, 74,155,117,111,101,173,166,154,144
        // ,165,116,101,100,166,117,111,110,167,118,117,116,174,167,155,156,172,156,144,143,173,155,154,153,174,167,166,165,175,174,173,172},
        // { 43, 42, 41, 40, 61, 62, 63, 64, 92, 93, 94, 95,135,136,137,138, 68, 67, 66, 65, 73, 72, 71, 70,102,103,104,105,145,146,147,148
        // , 99, 98, 97, 96,109,108,107,106,115,114,113,112,157,158,159,160,142,141,140,139,152,151,150,149,164,163,162,161,171,170,169,168},
        // { 40, 41, 42, 43, 65, 66, 67, 68, 96, 97, 98, 99,139,140,141,142, 64, 63, 62, 61, 70, 71, 72, 73,106,107,108,109,149,150,151,152
        // , 95, 94, 93, 92,105,104,103,102,112,113,114,115,161,162,163,164,138,137,136,135,148,147,146,145,160,159,158,157,168,169,170,171},
        // { 44, 69,100,143, 69, 74,110,153,100,101,116,165,143,144,156,172, 69, 74,101,144, 74, 75,111,154,110,111,117,166,153,154,155,173
        // ,100,110,116,156,101,111,117,155,116,117,118,167,165,166,167,174,143,153,165,172,144,154,166,173,156,155,167,174,172,173,174,175}};

        { // scope: perform some sanity checks on the number tables above
            {
                std::vector<int> mult40(40, 0);
                for (int j_uniq{0}; j_uniq < 16; ++j_uniq) {
                    int count{0};
                    for (int i{0}; i < 64; ++i) {
                        count += (i_uniq16[i] == j_uniq);
                        ++mult40.at(index40[j_uniq][i]);
                    } // i
                    assert(4 == count);
                } // j_uniq
                size_t mult_sum{0};
                for (int i40{0}; i40 < 40; ++i40) {
                    if (echo > 27) std::printf("# %s: multiplicity[%i]= %d found %d\n", __func__, i40, multiplicity40[i40], mult40[i40]);
                    assert(multiplicity40[i40] == 4*mult40[i40]);
                    mult_sum += size_t(mult40[i40]);
                } // m
                assert(16*16*16 == 4*mult_sum);
            }

            // {
            //     std::vector<uint8_t> mult176(176, 0);
            //     for (int b{0}; b < 64; ++b) {
            //         for (int i{0}; i < 64; ++i) {
            //             ++mult176.at(index176[b][i]);
            //         } // i
            //     } // b
            //     size_t mult_sum{0};
            //     for (int i176{0}; i176 < 176; ++i176) {
            //         // assert(((i176 < 8) ? 8 : 24) == mult176[i176]); // depends on labelling order
            //         mult_sum += mult176[i176];
            //     } // i176
            //     assert(8*8 + 168*24 == mult_sum);
            // }
        } // scope
 
        show_symmetrized(density, gid, nblocks, index40, 40, i_uniq16, "show value distribution for diamond symmetry", echo);
        // show_symmetrized(density, gid, nblocks, index176, 176, nullptr, "symmetrized values for diamond symmetry", echo - 1);

        return 0;
    } // verify_diamond


    inline status_t verify(
          view2D<double> const & density // or local effective potential
        , int64_t const gid[]
        , size_t const nblocks
        , int const echo=0 // log output level
    ) {
        auto const verify_benchmark_diamond = "verify.benchmark.diamond";
        auto const dia = control::get(verify_benchmark_diamond, 0.);
        if (dia) {
            assert(density.stride() == 4*4*4);
            return verify_diamond(density, gid, nblocks, echo);
        } else {
            if (echo > 9) std::printf("# %s: no verification found, activate e.g. +%s=1\n", __func__, verify_benchmark_diamond);
            return 0;
        }
    } // verify


    inline status_t all_tests(int const echo=0) {
        // size_t const nblocks = 3;
        // view2D<double> density(nblocks, 4*4*4, 1.);
        // int64_t const gid[nblocks] = {0, 1, 8}; // cubes {[000], [100], [200]} in [xyz] notation
        size_t const nblocks = 64;
        view2D<double> density(nblocks, 4*4*4, 1.);
        int64_t gid[nblocks]; std::iota(gid, gid + nblocks, 0);
        return verify(density, gid, nblocks, echo);
    } // all_tests

} // namespace verify_benchmark
