#pragma once
// This file is part of AngstromCube under MIT License

#include <cstdio> // std::sprintf
#include <cassert> // assert
#include <algorithm> // std::max
#include <cstdint> // int8_t, int16_t
#include <numeric> // std::iota

#include "simple_stats.hxx" // ::Stats
#include "status.hxx" // status_t
#include "control.hxx" // ::get
#include "recorded_warnings.hxx" // warn
#include "data_view.hxx" // view2D<T>
#include "mpi_parallel.hxx" // ::allreduce
#include "global_coordinates.hxx" // ::get

namespace verify_benchmark {

    inline void show_symmetrized(
          view2D<double> const & density // assume to have 4^3 blocks of 4^3 grid points per cubic diamond unit cell
        , int64_t const gid[] // global block identifyer
        , size_t const nblocks // number of blocks on this MPI rank
        , uint8_t const index[][64]
        , size_t const n=176
        , uint8_t const indirection[]=nullptr
        , char const *const text="?"
        , int const echo=0 // log output level
    ) {
        assert(4*4*4 == density.stride());

        std::vector<simple_stats::Stats<double>> st(n);

        for (size_t iblock{0}; iblock < nblocks; ++iblock) {
            double const *const rho = density[iblock]; // a double[64] array
            uint32_t coords[3]; global_coordinates::get(coords, gid[iblock]);
            auto const i444 = (coords[2]*4 + coords[1])*4 + coords[0];
            auto const i16 = indirection ? indirection[i444] : i444;
            auto const *const idx = index[i16];
         // if (echo > 9) std::printf("# add block [%i %i %i], id= %lli with i16=%i\n", coords[0], coords[1], coords[2], gid[iblock], int(i16));
            for (int i64{0}; i64 < 64; ++i64) { // grid points
                auto const i176 = idx[i64];
                assert(i176 < n);
                st.at(i176).add(rho[i64]);
            } // i64
        } // iblock

        for (int i176{0}; i176 < n; ++i176) {
            mpi_parallel::allreduce(st.at(i176));
        } // i176

        if (echo > 1) { // plot
            std::printf("\n## %s\n# i%lu avg avg+dev avg-dev min max dev tim\n", text, n);
            for (int i176{0}; i176 < n; ++i176) {
                auto const & s = st.at(i176);
                auto const avg = s.mean(), dev = s.dev();
                std::printf("%d  %g %g %g %g %g %g %lu\n", i176, avg, avg + dev, avg - dev, s.min(), s.max(), dev, s.tim());
            } // i176
        } // echo


    } // show_symmetrized


    inline status_t verify_diamond(
          view2D<double> const & density // assume to have 4^3 blocks of 4^3 grid points per cubic diamond unit cell
        , int64_t const gid[] // global block identifyer
        , size_t const nblocks // number of blocks on this MPI rank
        , int const echo=0 // log output level
    ) {

        // assume that the coarse density has a diamond unit cell with 16x16x16 grid points, i.e. 4x4x4 blocks per unit cell
        uint8_t const i_uniq16[64] = {0,1,2,3,4,5,6,7,2,3,0,1,6,7,4,5,8,9,10,11,12,13,14,15,10,11,8,9,14,15,12,13,2,3,0,1,6,7,4,5,0,1,2,3,4,5,6,7,10,11,8,9,14,15,12,13,8,9,10,11,12,13,14,15};
        uint8_t const index40[16][64] = {
        {27,32,34,36,32,35,37,34,34,37,35,32,36,34,32,27,32,35,37,34,35,38,39,37,37,39,38,35,34,37,35,32,34,37,35,32,37,39,38,35,35,38,39,37,32,35,37,34,36,34,32,27,34,37,35,32,32,35,37,34,27,32,34,36},
        {33,28,23,18,31,25,19,12,26,20,14, 8,22,16,11, 5,31,25,19,12,30,24,17,10,29,21,15, 7,26,20,14, 8,26,20,14, 8,29,21,15, 7,30,24,17,10,31,25,19,12,22,16,11, 5,26,20,14, 8,31,25,19,12,33,28,23,18},
        {13, 9, 4, 1, 9, 6, 3, 4, 4, 3, 6, 9, 1, 4, 9,13, 9, 6, 3, 4, 6, 2, 0, 3, 3, 0, 2, 6, 4, 3, 6, 9, 4, 3, 6, 9, 3, 0, 2, 6, 6, 2, 0, 3, 9, 6, 3, 4, 1, 4, 9,13, 4, 3, 6, 9, 9, 6, 3, 4,13, 9, 4, 1},
        { 5,11,16,22, 8,14,20,26,12,19,25,31,18,23,28,33, 8,14,20,26, 7,15,21,29,10,17,24,30,12,19,25,31,12,19,25,31,10,17,24,30, 7,15,21,29, 8,14,20,26,18,23,28,33,12,19,25,31, 8,14,20,26, 5,11,16,22},
        {33,31,26,22,28,25,20,16,23,19,14,11,18,12, 8, 5,31,30,29,26,25,24,21,20,19,17,15,14,12,10, 7, 8,26,29,30,31,20,21,24,25,14,15,17,19, 8, 7,10,12,22,26,31,33,16,20,25,28,11,14,19,23, 5, 8,12,18},
        {18,12, 8, 5,12,10, 7, 8, 8, 7,10,12, 5, 8,12,18,23,19,14,11,19,17,15,14,14,15,17,19,11,14,19,23,28,25,20,16,25,24,21,20,20,21,24,25,16,20,25,28,33,31,26,22,31,30,29,26,26,29,30,31,22,26,31,33},
        { 5, 8,12,18,11,14,19,23,16,20,25,28,22,26,31,33, 8, 7,10,12,14,15,17,19,20,21,24,25,26,29,30,31,12,10, 7, 8,19,17,15,14,25,24,21,20,31,30,29,26,18,12, 8, 5,23,19,14,11,28,25,20,16,33,31,26,22},
        {22,26,31,33,26,29,30,31,31,30,29,26,33,31,26,22,16,20,25,28,20,21,24,25,25,24,21,20,28,25,20,16,11,14,19,23,14,15,17,19,19,17,15,14,23,19,14,11, 5, 8,12,18, 8, 7,10,12,12,10, 7, 8,18,12, 8, 5},
        {33,31,26,22,31,30,29,26,26,29,30,31,22,26,31,33,28,25,20,16,25,24,21,20,20,21,24,25,16,20,25,28,23,19,14,11,19,17,15,14,14,15,17,19,11,14,19,23,18,12, 8, 5,12,10, 7, 8, 8, 7,10,12, 5, 8,12,18},
        {18,12, 8, 5,23,19,14,11,28,25,20,16,33,31,26,22,12,10, 7, 8,19,17,15,14,25,24,21,20,31,30,29,26, 8, 7,10,12,14,15,17,19,20,21,24,25,26,29,30,31, 5, 8,12,18,11,14,19,23,16,20,25,28,22,26,31,33},
        { 5, 8,12,18, 8, 7,10,12,12,10, 7, 8,18,12, 8, 5,11,14,19,23,14,15,17,19,19,17,15,14,23,19,14,11,16,20,25,28,20,21,24,25,25,24,21,20,28,25,20,16,22,26,31,33,26,29,30,31,31,30,29,26,33,31,26,22},
        {22,26,31,33,16,20,25,28,11,14,19,23, 5, 8,12,18,26,29,30,31,20,21,24,25,14,15,17,19, 8, 7,10,12,31,30,29,26,25,24,21,20,19,17,15,14,12,10, 7, 8,33,31,26,22,28,25,20,16,23,19,14,11,18,12, 8, 5},
        {18,23,28,33,12,19,25,31, 8,14,20,26, 5,11,16,22,12,19,25,31,10,17,24,30, 7,15,21,29, 8,14,20,26, 8,14,20,26, 7,15,21,29,10,17,24,30,12,19,25,31, 5,11,16,22, 8,14,20,26,12,19,25,31,18,23,28,33},
        {36,34,32,27,34,37,35,32,32,35,37,34,27,32,34,36,34,37,35,32,37,39,38,35,35,38,39,37,32,35,37,34,32,35,37,34,35,38,39,37,37,39,38,35,34,37,35,32,27,32,34,36,32,35,37,34,34,37,35,32,36,34,32,27},
        {22,16,11, 5,26,20,14, 8,31,25,19,12,33,28,23,18,26,20,14, 8,29,21,15, 7,30,24,17,10,31,25,19,12,31,25,19,12,30,24,17,10,29,21,15, 7,26,20,14, 8,33,28,23,18,31,25,19,12,26,20,14, 8,22,16,11, 5},
        { 1, 4, 9,13, 4, 3, 6, 9, 9, 6, 3, 4,13, 9, 4, 1, 4, 3, 6, 9, 3, 0, 2, 6, 6, 2, 0, 3, 9, 6, 3, 4, 9, 6, 3, 4, 6, 2, 0, 3, 3, 0, 2, 6, 4, 3, 6, 9,13, 9, 4, 1, 9, 6, 3, 4, 4, 3, 6, 9, 1, 4, 9,13}};
        int16_t const multiplicity[40] = { 32,32,32,96,96,96,96,96,192,96,96,96,192,32,192,96,96,96,96,192,192,96,96,96,96,192,192,32,96,96,96,192,96,96,96,96,32,96,32,32};

        uint8_t const index176[64][64] = { // symmetry indices
        {  7,175,174,173,175,168,167,166,174,156,155,154,173,157,145,144,175,168,156,157,168,  6,119,118,167,119,113,112,166,118,103,102
        ,174,167,155,145,156,119,113,103,155,113,  5, 77,154,112, 77, 72,173,166,154,144,157,118,112,102,145,103, 77, 72,144,102, 72,  4},
        {172,171,170,169,165,164,163,162,153,152,151,150,143,142,141,140,158,159,160,161,117,116,115,114,111,110,109,108,101,100, 99, 98
        ,146,147,148,149,104,105,106,107, 76, 75, 74, 73, 71, 70, 69, 68,136,137,138,139, 94, 95, 96, 97, 64, 65, 66, 67, 47, 46, 45, 44},
        {169,170,171,172,161,160,159,158,149,148,147,146,139,138,137,136,162,163,164,165,114,115,116,117,107,106,105,104, 97, 96, 95, 94
        ,150,151,152,153,108,109,110,111, 73, 74, 75, 76, 67, 66, 65, 64,140,141,142,143, 98, 99,100,101, 68, 69, 70, 71, 44, 45, 46, 47},
        {173,174,175,  7,157,156,168,175,145,155,167,174,144,154,166,173,166,167,168,175,118,119,  6,168,103,113,119,156,102,112,118,157
        ,154,155,156,174,112,113,119,167, 77,  5,113,155, 72, 77,103,145,144,145,157,173,102,103,118,166, 72, 77,112,154,  4, 72,102,144},
        {172,158,146,136,171,159,147,137,170,160,148,138,169,161,149,139,165,117,104, 94,164,116,105, 95,163,115,106, 96,162,114,107, 97
        ,153,111, 76, 64,152,110, 75, 65,151,109, 74, 66,150,108, 73, 67,143,101, 71, 47,142,100, 70, 46,141, 99, 69, 45,140, 98, 68, 44},
        {135,134,133,132,129,128,127,126,130,124,123,122,131,125,121,120, 93, 92, 91, 90, 87, 86, 85, 84, 88, 82, 81, 80, 89, 83, 79, 78
        , 63, 62, 61, 60, 57, 56, 55, 54, 58, 52, 51, 50, 59, 53, 49, 48, 43, 42, 41, 40, 37, 36, 35, 34, 38, 32, 31, 30, 39, 33, 29, 28},
        {131,130,129,135,125,124,128,134,121,123,127,133,120,122,126,132, 89, 88, 87, 93, 83, 82, 86, 92, 79, 81, 85, 91, 78, 80, 84, 90
        , 59, 58, 57, 63, 53, 52, 56, 62, 49, 51, 55, 61, 48, 50, 54, 60, 39, 38, 37, 43, 33, 32, 36, 42, 29, 31, 35, 41, 28, 30, 34, 40},
        {143,153,165,172,142,152,164,171,141,151,163,170,140,150,162,169,101,111,117,158,100,110,116,159, 99,109,115,160, 98,108,114,161
        , 71, 76,104,146, 70, 75,105,147, 69, 74,106,148, 68, 73,107,149, 47, 64, 94,136, 46, 65, 95,137, 45, 66, 96,138, 44, 67, 97,139},
        {169,162,150,140,170,163,151,141,171,164,152,142,172,165,153,143,161,114,108, 98,160,115,109, 99,159,116,110,100,158,117,111,101
        ,149,107, 73, 68,148,106, 74, 69,147,105, 75, 70,146,104, 76, 71,139, 97, 67, 44,138, 96, 66, 45,137, 95, 65, 46,136, 94, 64, 47},
        {132,126,122,120,133,127,123,121,134,128,124,125,135,129,130,131, 90, 84, 80, 78, 91, 85, 81, 79, 92, 86, 82, 83, 93, 87, 88, 89
        , 60, 54, 50, 48, 61, 55, 51, 49, 62, 56, 52, 53, 63, 57, 58, 59, 40, 34, 30, 28, 41, 35, 31, 29, 42, 36, 32, 33, 43, 37, 38, 39},
        {120,121,125,131,122,123,124,130,126,127,128,129,132,133,134,135, 78, 79, 83, 89, 80, 81, 82, 88, 84, 85, 86, 87, 90, 91, 92, 93
        , 48, 49, 53, 59, 50, 51, 52, 58, 54, 55, 56, 57, 60, 61, 62, 63, 28, 29, 33, 39, 30, 31, 32, 38, 34, 35, 36, 37, 40, 41, 42, 43},
        {139,149,161,169,138,148,160,170,137,147,159,171,136,146,158,172, 97,107,114,162, 96,106,115,163, 95,105,116,164, 94,104,117,165
        , 67, 73,108,150, 66, 74,109,151, 65, 75,110,152, 64, 76,111,153, 44, 68, 98,140, 45, 69, 99,141, 46, 70,100,142, 47, 71,101,143},
        {173,166,154,144,174,167,155,145,175,168,156,157,  7,175,174,173,157,118,112,102,156,119,113,103,168,  6,119,118,175,168,167,166
        ,145,103, 77, 72,155,113,  5, 77,167,119,113,112,174,156,155,154,144,102, 72,  4,154,112, 77, 72,166,118,103,102,173,157,145,144},
        {136,137,138,139,146,147,148,149,158,159,160,161,172,171,170,169, 94, 95, 96, 97,104,105,106,107,117,116,115,114,165,164,163,162
        , 64, 65, 66, 67, 76, 75, 74, 73,111,110,109,108,153,152,151,150, 47, 46, 45, 44, 71, 70, 69, 68,101,100, 99, 98,143,142,141,140},
        {140,141,142,143,150,151,152,153,162,163,164,165,169,170,171,172, 98, 99,100,101,108,109,110,111,114,115,116,117,161,160,159,158
        , 68, 69, 70, 71, 73, 74, 75, 76,107,106,105,104,149,148,147,146, 44, 45, 46, 47, 67, 66, 65, 64, 97, 96, 95, 94,139,138,137,136},
        {144,145,157,173,154,155,156,174,166,167,168,175,173,174,175,  7,102,103,118,166,112,113,119,167,118,119,  6,168,157,156,168,175
        , 72, 77,112,154, 77,  5,113,155,103,113,119,156,145,155,167,174,  4, 72,102,144, 72, 77,103,145,102,112,118,157,144,154,166,173},
        {172,165,153,143,158,117,111,101,146,104, 76, 71,136, 94, 64, 47,171,164,152,142,159,116,110,100,147,105, 75, 70,137, 95, 65, 46
        ,170,163,151,141,160,115,109, 99,148,106, 74, 69,138, 96, 66, 45,169,162,150,140,161,114,108, 98,149,107, 73, 68,139, 97, 67, 44},
        {135,129,130,131, 93, 87, 88, 89, 63, 57, 58, 59, 43, 37, 38, 39,134,128,124,125, 92, 86, 82, 83, 62, 56, 52, 53, 42, 36, 32, 33
        ,133,127,123,121, 91, 85, 81, 79, 61, 55, 51, 49, 41, 35, 31, 29,132,126,122,120, 90, 84, 80, 78, 60, 54, 50, 48, 40, 34, 30, 28},
        {132,133,134,135, 90, 91, 92, 93, 60, 61, 62, 63, 40, 41, 42, 43,126,127,128,129, 84, 85, 86, 87, 54, 55, 56, 57, 34, 35, 36, 37
        ,122,123,124,130, 80, 81, 82, 88, 50, 51, 52, 58, 30, 31, 32, 38,120,121,125,131, 78, 79, 83, 89, 48, 49, 53, 59, 28, 29, 33, 39},
        {136,146,158,172, 94,104,117,165, 64, 76,111,153, 47, 71,101,143,137,147,159,171, 95,105,116,164, 65, 75,110,152, 46, 70,100,142
        ,138,148,160,170, 96,106,115,163, 66, 74,109,151, 45, 69, 99,141,139,149,161,169, 97,107,114,162, 67, 73,108,150, 44, 68, 98,140},
        {135, 93, 63, 43,134, 92, 62, 42,133, 91, 61, 41,132, 90, 60, 40,129, 87, 57, 37,128, 86, 56, 36,127, 85, 55, 35,126, 84, 54, 34
        ,130, 88, 58, 38,124, 82, 52, 32,123, 81, 51, 31,122, 80, 50, 30,131, 89, 59, 39,125, 83, 53, 33,121, 79, 49, 29,120, 78, 48, 28},
        {  3, 27, 26, 25, 27, 24, 23, 22, 26, 20, 19, 18, 25, 21, 17, 16, 27, 24, 20, 21, 24,  2, 15, 14, 23, 15, 13, 12, 22, 14, 11, 10
        , 26, 23, 19, 17, 20, 15, 13, 11, 19, 13,  1,  9, 18, 12,  9,  8, 25, 22, 18, 16, 21, 14, 12, 10, 17, 11,  9,  8, 16, 10,  8,  0},
        { 25, 26, 27,  3, 21, 20, 24, 27, 17, 19, 23, 26, 16, 18, 22, 25, 22, 23, 24, 27, 14, 15,  2, 24, 11, 13, 15, 20, 10, 12, 14, 21
        , 18, 19, 20, 26, 12, 13, 15, 23,  9,  1, 13, 19,  8,  9, 11, 17, 16, 17, 21, 25, 10, 11, 14, 22,  8,  9, 12, 18,  0,  8, 10, 16},
        { 43, 63, 93,135, 37, 57, 87,129, 38, 58, 88,130, 39, 59, 89,131, 42, 62, 92,134, 36, 56, 86,128, 32, 52, 82,124, 33, 53, 83,125
        , 41, 61, 91,133, 35, 55, 85,127, 31, 51, 81,123, 29, 49, 79,121, 40, 60, 90,132, 34, 54, 84,126, 30, 50, 80,122, 28, 48, 78,120},
        {131, 89, 59, 39,130, 88, 58, 38,129, 87, 57, 37,135, 93, 63, 43,125, 83, 53, 33,124, 82, 52, 32,128, 86, 56, 36,134, 92, 62, 42
        ,121, 79, 49, 29,123, 81, 51, 31,127, 85, 55, 35,133, 91, 61, 41,120, 78, 48, 28,122, 80, 50, 30,126, 84, 54, 34,132, 90, 60, 40},
        { 25, 22, 18, 16, 26, 23, 19, 17, 27, 24, 20, 21,  3, 27, 26, 25, 21, 14, 12, 10, 20, 15, 13, 11, 24,  2, 15, 14, 27, 24, 23, 22
        , 17, 11,  9,  8, 19, 13,  1,  9, 23, 15, 13, 12, 26, 20, 19, 18, 16, 10,  8,  0, 18, 12,  9,  8, 22, 14, 11, 10, 25, 21, 17, 16},
        { 16, 17, 21, 25, 18, 19, 20, 26, 22, 23, 24, 27, 25, 26, 27,  3, 10, 11, 14, 22, 12, 13, 15, 23, 14, 15,  2, 24, 21, 20, 24, 27
        ,  8,  9, 12, 18,  9,  1, 13, 19, 11, 13, 15, 20, 17, 19, 23, 26,  0,  8, 10, 16,  8,  9, 11, 17, 10, 12, 14, 21, 16, 18, 22, 25},
        { 40, 60, 90,132, 41, 61, 91,133, 42, 62, 92,134, 43, 63, 93,135, 34, 54, 84,126, 35, 55, 85,127, 36, 56, 86,128, 37, 57, 87,129
        , 30, 50, 80,122, 31, 51, 81,123, 32, 52, 82,124, 38, 58, 88,130, 28, 48, 78,120, 29, 49, 79,121, 33, 53, 83,125, 39, 59, 89,131},
        {143,101, 71, 47,153,111, 76, 64,165,117,104, 94,172,158,146,136,142,100, 70, 46,152,110, 75, 65,164,116,105, 95,171,159,147,137
        ,141, 99, 69, 45,151,109, 74, 66,163,115,106, 96,170,160,148,138,140, 98, 68, 44,150,108, 73, 67,162,114,107, 97,169,161,149,139},
        { 43, 42, 41, 40, 63, 62, 61, 60, 93, 92, 91, 90,135,134,133,132, 37, 36, 35, 34, 57, 56, 55, 54, 87, 86, 85, 84,129,128,127,126
        , 38, 32, 31, 30, 58, 52, 51, 50, 88, 82, 81, 80,130,124,123,122, 39, 33, 29, 28, 59, 53, 49, 48, 89, 83, 79, 78,131,125,121,120},
        { 39, 38, 37, 43, 59, 58, 57, 63, 89, 88, 87, 93,131,130,129,135, 33, 32, 36, 42, 53, 52, 56, 62, 83, 82, 86, 92,125,124,128,134
        , 29, 31, 35, 41, 49, 51, 55, 61, 79, 81, 85, 91,121,123,127,133, 28, 30, 34, 40, 48, 50, 54, 60, 78, 80, 84, 90,120,122,126,132},
        { 47, 64, 94,136, 71, 76,104,146,101,111,117,158,143,153,165,172, 46, 65, 95,137, 70, 75,105,147,100,110,116,159,142,152,164,171
        , 45, 66, 96,138, 69, 74,106,148, 99,109,115,160,141,151,163,170, 44, 67, 97,139, 68, 73,107,149, 98,108,114,161,140,150,162,169},
        {169,161,149,139,162,114,107, 97,150,108, 73, 67,140, 98, 68, 44,170,160,148,138,163,115,106, 96,151,109, 74, 66,141, 99, 69, 45
        ,171,159,147,137,164,116,105, 95,152,110, 75, 65,142,100, 70, 46,172,158,146,136,165,117,104, 94,153,111, 76, 64,143,101, 71, 47},
        {131,125,121,120, 89, 83, 79, 78, 59, 53, 49, 48, 39, 33, 29, 28,130,124,123,122, 88, 82, 81, 80, 58, 52, 51, 50, 38, 32, 31, 30
        ,129,128,127,126, 87, 86, 85, 84, 57, 56, 55, 54, 37, 36, 35, 34,135,134,133,132, 93, 92, 91, 90, 63, 62, 61, 60, 43, 42, 41, 40},
        {120,122,126,132, 78, 80, 84, 90, 48, 50, 54, 60, 28, 30, 34, 40,121,123,127,133, 79, 81, 85, 91, 49, 51, 55, 61, 29, 31, 35, 41
        ,125,124,128,134, 83, 82, 86, 92, 53, 52, 56, 62, 33, 32, 36, 42,131,130,129,135, 89, 88, 87, 93, 59, 58, 57, 63, 39, 38, 37, 43},
        {140,150,162,169, 98,108,114,161, 68, 73,107,149, 44, 67, 97,139,141,151,163,170, 99,109,115,160, 69, 74,106,148, 45, 66, 96,138
        ,142,152,164,171,100,110,116,159, 70, 75,105,147, 46, 65, 95,137,143,153,165,172,101,111,117,158, 71, 76,104,146, 47, 64, 94,136},
        {132, 90, 60, 40,126, 84, 54, 34,122, 80, 50, 30,120, 78, 48, 28,133, 91, 61, 41,127, 85, 55, 35,123, 81, 51, 31,121, 79, 49, 29
        ,134, 92, 62, 42,128, 86, 56, 36,124, 82, 52, 32,125, 83, 53, 33,135, 93, 63, 43,129, 87, 57, 37,130, 88, 58, 38,131, 89, 59, 39},
        { 25, 21, 17, 16, 22, 14, 11, 10, 18, 12,  9,  8, 16, 10,  8,  0, 26, 20, 19, 18, 23, 15, 13, 12, 19, 13,  1,  9, 17, 11,  9,  8
        , 27, 24, 23, 22, 24,  2, 15, 14, 20, 15, 13, 11, 21, 14, 12, 10,  3, 27, 26, 25, 27, 24, 20, 21, 26, 23, 19, 17, 25, 22, 18, 16},
        { 16, 18, 22, 25, 10, 12, 14, 21,  8,  9, 11, 17,  0,  8, 10, 16, 17, 19, 23, 26, 11, 13, 15, 20,  9,  1, 13, 19,  8,  9, 12, 18
        , 21, 20, 24, 27, 14, 15,  2, 24, 12, 13, 15, 23, 10, 11, 14, 22, 25, 26, 27,  3, 22, 23, 24, 27, 18, 19, 20, 26, 16, 17, 21, 25},
        { 39, 59, 89,131, 33, 53, 83,125, 29, 49, 79,121, 28, 48, 78,120, 38, 58, 88,130, 32, 52, 82,124, 31, 51, 81,123, 30, 50, 80,122
        , 37, 57, 87,129, 36, 56, 86,128, 35, 55, 85,127, 34, 54, 84,126, 43, 63, 93,135, 42, 62, 92,134, 41, 61, 91,133, 40, 60, 90,132},
        {120, 78, 48, 28,121, 79, 49, 29,125, 83, 53, 33,131, 89, 59, 39,122, 80, 50, 30,123, 81, 51, 31,124, 82, 52, 32,130, 88, 58, 38
        ,126, 84, 54, 34,127, 85, 55, 35,128, 86, 56, 36,129, 87, 57, 37,132, 90, 60, 40,133, 91, 61, 41,134, 92, 62, 42,135, 93, 63, 43},
        { 16, 10,  8,  0, 17, 11,  9,  8, 21, 14, 12, 10, 25, 22, 18, 16, 18, 12,  9,  8, 19, 13,  1,  9, 20, 15, 13, 11, 26, 23, 19, 17
        , 22, 14, 11, 10, 23, 15, 13, 12, 24,  2, 15, 14, 27, 24, 20, 21, 25, 21, 17, 16, 26, 20, 19, 18, 27, 24, 23, 22,  3, 27, 26, 25},
        {  0,  8, 10, 16,  8,  9, 12, 18, 10, 11, 14, 22, 16, 17, 21, 25,  8,  9, 11, 17,  9,  1, 13, 19, 12, 13, 15, 23, 18, 19, 20, 26
        , 10, 12, 14, 21, 11, 13, 15, 20, 14, 15,  2, 24, 22, 23, 24, 27, 16, 18, 22, 25, 17, 19, 23, 26, 21, 20, 24, 27, 25, 26, 27,  3},
        { 28, 48, 78,120, 30, 50, 80,122, 34, 54, 84,126, 40, 60, 90,132, 29, 49, 79,121, 31, 51, 81,123, 35, 55, 85,127, 41, 61, 91,133
        , 33, 53, 83,125, 32, 52, 82,124, 36, 56, 86,128, 42, 62, 92,134, 39, 59, 89,131, 38, 58, 88,130, 37, 57, 87,129, 43, 63, 93,135},
        {139, 97, 67, 44,149,107, 73, 68,161,114,108, 98,169,162,150,140,138, 96, 66, 45,148,106, 74, 69,160,115,109, 99,170,163,151,141
        ,137, 95, 65, 46,147,105, 75, 70,159,116,110,100,171,164,152,142,136, 94, 64, 47,146,104, 76, 71,158,117,111,101,172,165,153,143},
        { 40, 34, 30, 28, 60, 54, 50, 48, 90, 84, 80, 78,132,126,122,120, 41, 35, 31, 29, 61, 55, 51, 49, 91, 85, 81, 79,133,127,123,121
        , 42, 36, 32, 33, 62, 56, 52, 53, 92, 86, 82, 83,134,128,124,125, 43, 37, 38, 39, 63, 57, 58, 59, 93, 87, 88, 89,135,129,130,131},
        { 28, 29, 33, 39, 48, 49, 53, 59, 78, 79, 83, 89,120,121,125,131, 30, 31, 32, 38, 50, 51, 52, 58, 80, 81, 82, 88,122,123,124,130
        , 34, 35, 36, 37, 54, 55, 56, 57, 84, 85, 86, 87,126,127,128,129, 40, 41, 42, 43, 60, 61, 62, 63, 90, 91, 92, 93,132,133,134,135},
        { 44, 68, 98,140, 67, 73,108,150, 97,107,114,162,139,149,161,169, 45, 69, 99,141, 66, 74,109,151, 96,106,115,163,138,148,160,170
        , 46, 70,100,142, 65, 75,110,152, 95,105,116,164,137,147,159,171, 47, 71,101,143, 64, 76,111,153, 94,104,117,165,136,146,158,172},
        {173,157,145,144,166,118,103,102,154,112, 77, 72,144,102, 72,  4,174,156,155,154,167,119,113,112,155,113,  5, 77,145,103, 77, 72
        ,175,168,167,166,168,  6,119,118,156,119,113,103,157,118,112,102,  7,175,174,173,175,168,156,157,174,167,155,145,173,166,154,144},
        {143,142,141,140,101,100, 99, 98, 71, 70, 69, 68, 47, 46, 45, 44,153,152,151,150,111,110,109,108, 76, 75, 74, 73, 64, 65, 66, 67
        ,165,164,163,162,117,116,115,114,104,105,106,107, 94, 95, 96, 97,172,171,170,169,158,159,160,161,146,147,148,149,136,137,138,139},
        {139,138,137,136, 97, 96, 95, 94, 67, 66, 65, 64, 44, 45, 46, 47,149,148,147,146,107,106,105,104, 73, 74, 75, 76, 68, 69, 70, 71
        ,161,160,159,158,114,115,116,117,108,109,110,111, 98, 99,100,101,169,170,171,172,162,163,164,165,150,151,152,153,140,141,142,143},
        {144,154,166,173,102,112,118,157, 72, 77,103,145,  4, 72,102,144,145,155,167,174,103,113,119,156, 77,  5,113,155, 72, 77,112,154
        ,157,156,168,175,118,119,  6,168,112,113,119,167,102,103,118,166,173,174,175,  7,166,167,168,175,154,155,156,174,144,145,157,173},
        {136, 94, 64, 47,137, 95, 65, 46,138, 96, 66, 45,139, 97, 67, 44,146,104, 76, 71,147,105, 75, 70,148,106, 74, 69,149,107, 73, 68
        ,158,117,111,101,159,116,110,100,160,115,109, 99,161,114,108, 98,172,165,153,143,171,164,152,142,170,163,151,141,169,162,150,140},
        { 43, 37, 38, 39, 42, 36, 32, 33, 41, 35, 31, 29, 40, 34, 30, 28, 63, 57, 58, 59, 62, 56, 52, 53, 61, 55, 51, 49, 60, 54, 50, 48
        , 93, 87, 88, 89, 92, 86, 82, 83, 91, 85, 81, 79, 90, 84, 80, 78,135,129,130,131,134,128,124,125,133,127,123,121,132,126,122,120},
        { 40, 41, 42, 43, 34, 35, 36, 37, 30, 31, 32, 38, 28, 29, 33, 39, 60, 61, 62, 63, 54, 55, 56, 57, 50, 51, 52, 58, 48, 49, 53, 59
        , 90, 91, 92, 93, 84, 85, 86, 87, 80, 81, 82, 88, 78, 79, 83, 89,132,133,134,135,126,127,128,129,122,123,124,130,120,121,125,131},
        { 47, 71,101,143, 46, 70,100,142, 45, 69, 99,141, 44, 68, 98,140, 64, 76,111,153, 65, 75,110,152, 66, 74,109,151, 67, 73,108,150
        , 94,104,117,165, 95,105,116,164, 96,106,115,163, 97,107,114,162,136,146,158,172,137,147,159,171,138,148,160,170,139,149,161,169},
        {140, 98, 68, 44,141, 99, 69, 45,142,100, 70, 46,143,101, 71, 47,150,108, 73, 67,151,109, 74, 66,152,110, 75, 65,153,111, 76, 64
        ,162,114,107, 97,163,115,106, 96,164,116,105, 95,165,117,104, 94,169,161,149,139,170,160,148,138,171,159,147,137,172,158,146,136},
        { 39, 33, 29, 28, 38, 32, 31, 30, 37, 36, 35, 34, 43, 42, 41, 40, 59, 53, 49, 48, 58, 52, 51, 50, 57, 56, 55, 54, 63, 62, 61, 60
        , 89, 83, 79, 78, 88, 82, 81, 80, 87, 86, 85, 84, 93, 92, 91, 90,131,125,121,120,130,124,123,122,129,128,127,126,135,134,133,132},
        { 28, 30, 34, 40, 29, 31, 35, 41, 33, 32, 36, 42, 39, 38, 37, 43, 48, 50, 54, 60, 49, 51, 55, 61, 53, 52, 56, 62, 59, 58, 57, 63
        , 78, 80, 84, 90, 79, 81, 85, 91, 83, 82, 86, 92, 89, 88, 87, 93,120,122,126,132,121,123,127,133,125,124,128,134,131,130,129,135},
        { 44, 67, 97,139, 45, 66, 96,138, 46, 65, 95,137, 47, 64, 94,136, 68, 73,107,149, 69, 74,106,148, 70, 75,105,147, 71, 76,104,146
        , 98,108,114,161, 99,109,115,160,100,110,116,159,101,111,117,158,140,150,162,169,141,151,163,170,142,152,164,171,143,153,165,172},
        {144,102, 72,  4,145,103, 77, 72,157,118,112,102,173,166,154,144,154,112, 77, 72,155,113,  5, 77,156,119,113,103,174,167,155,145
        ,166,118,103,102,167,119,113,112,168,  6,119,118,175,168,156,157,173,157,145,144,174,156,155,154,175,168,167,166,  7,175,174,173},
        { 47, 46, 45, 44, 64, 65, 66, 67, 94, 95, 96, 97,136,137,138,139, 71, 70, 69, 68, 76, 75, 74, 73,104,105,106,107,146,147,148,149
        ,101,100, 99, 98,111,110,109,108,117,116,115,114,158,159,160,161,143,142,141,140,153,152,151,150,165,164,163,162,172,171,170,169},
        { 44, 45, 46, 47, 68, 69, 70, 71, 98, 99,100,101,140,141,142,143, 67, 66, 65, 64, 73, 74, 75, 76,108,109,110,111,150,151,152,153
        , 97, 96, 95, 94,107,106,105,104,114,115,116,117,162,163,164,165,139,138,137,136,149,148,147,146,161,160,159,158,169,170,171,172},
        {  4, 72,102,144, 72, 77,112,154,102,103,118,166,144,145,157,173, 72, 77,103,145, 77,  5,113,155,112,113,119,167,154,155,156,174
        ,102,112,118,157,103,113,119,156,118,119,  6,168,166,167,168,175,144,154,166,173,145,155,167,174,157,156,168,175,173,174,175,  7}};

        { // scope: perform some sanity checks on the number tables above
            std::vector<int> mult40(40, 0);
            for (int j_uniq{0}; j_uniq < 16; ++j_uniq) {
                int count{0};
                for (int i{0}; i < 64; ++i) {
                    count += (i_uniq16[i] == j_uniq);
                    ++mult40.at(index40[j_uniq][i]);
                } // i
                assert(4 == count);
            } // j_uniq
            size_t mult_sum{0};
            for (int i40{0}; i40 < 40; ++i40) {
                if (echo > 27) std::printf("# %s: multiplicity[%i]= %d found %d\n", __func__, i40, multiplicity[i40], mult40[i40]);
                assert(multiplicity[i40] == 4*mult40[i40]);
                mult_sum += size_t(mult40[i40]);
            } // m
            assert(4096 == mult_sum);

            {
                std::vector<uint8_t> mult176(176, 0);
                for (int b{0}; b < 64; ++b) {
                    for (int i{0}; i < 64; ++i) {
                        ++mult176.at(index176[b][i]);
                    } // i
                } // b
                size_t mult_sum{0};
                for (int i176{0}; i176 < 176; ++i176) {
                    assert(((i176 < 8) ? 8 : 24) == mult176[i176]);
                    mult_sum += mult176[i176];
                } // i176
                assert(8*8 + 168*24 == mult_sum);
            }
        } // scope
 
        show_symmetrized(density, gid, nblocks, index40, 40, i_uniq16, "show density value distribution for diamond symmetry", echo);
        show_symmetrized(density, gid, nblocks, index176, 176, nullptr, "symmetrized density values for diamond symmetry", echo - 1);

        return 0;
    } // verify_diamond


    inline status_t verify(
          view2D<double> const & density
        , int64_t const gid[]
        , size_t const nblocks
        , int const echo=0 // log output level
    ) {
        auto const dia = control::get("verify.benchmark.diamond", 0.);
        if (dia) {
            assert(density.stride() == 4*4*4);
            return verify_diamond(density, gid, nblocks, echo);
        } else
        {
            return 0;
        }
    } // verify


    inline status_t all_tests(int const echo=0) {
        // size_t const nblocks = 3;
        // view2D<double> density(nblocks, 4*4*4, 1.);
        // int64_t const gid[nblocks] = {0, 1, 8}; // cubes {[000], [100], [200]} in [xyz] notation
        size_t const nblocks = 64;
        view2D<double> density(nblocks, 4*4*4, 1.);
        int64_t gid[nblocks]; std::iota(gid, gid + 64, 0);
        return verify(density, gid, nblocks, echo);
    } // all_tests


} // namespace verify_benchmark
